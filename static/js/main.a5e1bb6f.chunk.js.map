{"version":3,"sources":["About/About.js","Cars/Car/Car.js","Cars/Cars.js","CarDetail/CarDetail.js","App.js","registerServiceWorker.js","index.js"],"names":["About","props","className","withRouter","onClick","history","push","name","toLowerCase","year","Cars","state","cars","goToHomePage","pathname","style","width","margin","paddingTop","textAlign","this","map","car","index","Component","CarDetail","match","params","React","App","isLoggedIn","to","exact","activeClassName","activeStyle","color","setState","path","render","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","app","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a5e1bb6f.chunk.js","sourcesContent":["import React from 'react'\nimport './About.scss'\n\nconst About = props => (\n  <div className=\"About\">\n    <h1>About page</h1>\n  </div>\n)\n\n\nexport default About","import React from 'react'\nimport './Car.scss'\nimport {withRouter} from 'react-router-dom'\n\n\nconst Car = props => {\n  return (\n    <div \n      onClick={() => props.history.push('/cars/' + props.name.toLowerCase())}\n      className={'Car'}\n    >\n      <h3>Ð¡ar name: {props.name}</h3>\n      <p>Year: <strong>{props.year}</strong></p>\n    </div>\n  )\n}\n\nexport default withRouter(Car)","import React, {Component} from 'react'\nimport Car from './Car/Car'\n\nexport default class Cars extends Component {\n\n  state = {\n    cars: [\n      {name: 'Ford', year: 2018},\n      {name: 'Audi', year: 2016},\n      {name: 'Mazda', year: 2010}\n    ]\n  }\n\n  goToHomePage = () => {\n    this.props.history.push({\n      pathname: '/'\n    })\n  }\n\n  render() {\n\n    return (\n      <div style={{\n        width: 400,\n        margin: 'auto',\n        paddingTop: '20px',\n        textAlign: 'center'\n      }}>\n        <button onClick={this.goToHomePage}>Go to home page</button>\n        <hr/>\n        {this.state.cars.map((car, index) => {\n          return (\n            <Car\n              key={index}\n              name={car.name}\n              year={car.year}\n            />\n          )\n        })}\n      </div>\n    )\n  }\n}","import React from 'react'\r\n\r\nexport default class CarDetail extends React.Component {\r\n\r\n  render() {\r\n\r\n    return(\r\n      <div style={{textAlign: 'center'}}>\r\n        <h1>{this.props.match.params.name}</h1>\r\n      </div>\r\n    )\r\n\r\n  }\r\n}","import React, {Component} from 'react'\nimport './App.scss'\nimport {Route, NavLink, Switch, Redirect} from 'react-router-dom'\nimport About from './About/About'\nimport Cars from './Cars/Cars'\nimport CarDetail from './CarDetail/CarDetail'\n\nclass App extends Component {\n\n  state = {\n    isLoggedIn: false\n  }\n\n  render() {\n\n    return (\n      <div>\n        <nav className=\"nav\">\n          <ul>\n            <li>\n              <NavLink \n                to=\"/\"\n                exact\n                activeClassName={'wfm-active'}\n              >Home</NavLink>\n            </li>\n            <li>\n              <NavLink \n                to=\"/about\"\n                activeStyle={{\n                  color: 'blue'\n                }}\n              >About</NavLink>\n            </li>\n            <li>\n              <NavLink to={{\n                pathname: '/cars'\n              }}>Cars</NavLink>\n            </li>\n          </ul>\n        </nav>\n\n        <hr/>\n\n        <div style={{textAlign: 'center'}}>\n          <h3>Is logged in {this.state.isLoggedIn ? 'TRUE' : 'FALSE'}</h3>\n          <button onClick={() => this.setState({isLoggedIn: true})}>Log in</button>\n        </div>\n\n        <hr/>\n\n        <Switch>\n          <Route path=\"/\" exact render={() => <h1>Home page</h1>} />\n          { this.state.isLoggedIn ? <Route path=\"/about\" component={About} /> : null }\n          <Route path=\"/cars/:name\" component={CarDetail} />\n          <Route path=\"/cars\" component={Cars} />\n          <Redirect to={'/'} />\n          {/* <Route render={() => <h1 style={{color: 'red', textAlign: 'center'}}>404 Not found</h1>}/> */}\n        </Switch>\n\n      </div>\n    );\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport registerServiceWorker from './registerServiceWorker';\n\n\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}